source("~/.active-rstudio-document", echo=TRUE)
devtools::document()
rm(read_wf_statements)
"/Users/ericsurjaatmadja/Desktop/Projects/Personal_Finance/Data/Wells Fargo/Account Statements/Checking/Statement of Accounts_Wells Fargo_Checking_2020-01.pdf"
library(tidyverse)
library(ggplot2)
library(magick)
library(lubridate)
file %>%
pdftools::pdf_text() %>%
str_split(pattern = "\n")
file
file <- "/Users/ericsurjaatmadja/Desktop/Projects/Personal_Finance/Data/Wells Fargo/Account Statements/Checking/Statement of Accounts_Wells Fargo_Checking_2020-01.pdf"
file %>%
pdftools::pdf_text() %>%
str_split(pattern = "\n")
read_transactions <- function(file){
pages <-
file %>%
pdftools::pdf_text() %>%
str_split(pattern = "\n")
initial_page <-
pages %>%
map_lgl(.f = ~ str_detect(.x, "^Transaction history$") %>% any()) %>%
which() %>%
.[[1]]
additional_pages <-
pages %>%
map_lgl(.f = ~ str_detect(.x, "^Transaction history \\(continued\\)$") %>% any()) %>%
which()
ending_balance_lines <-
pages[initial_page] %>%
.[[1]] %>%
str_which("^( )+(Ending balance on )([0-9]{1,2})/([0-9]{1,2})")
starting_page_list <-
initial_page %>%
list(
page = .,
start = pages[[.]] %>% str_which("( )+(Date)( )+(Number Description)") + 1,
end = if(length(ending_balance_lines) == 2){
ending_balance_lines[[2]] - 1
} else {
length(pages[[initial_page]]) - 1
}
)
additional_page_list <-
additional_pages %>%
map(.f = ~list(
page = .x,
start = pages[[.x]] %>% str_which("^Transaction history \\(continued\\)$") + 3,
end = pages[[.x]] %>% str_which("^( )+Ending balance on [0-9]{1,2}/[0-9]{1,2}") %>% .[[1]] - 1
))
# Scrape Report Date ====
report_date <-
pages[initial_page] %>%
.[[1]] %>%
.[1] %>%
str_extract("^([A-z]+ [0-9]{1,2}, [0-9]{4})") %>%
mdy()
# Prep table to be formatted ====
transactions <-
if(is_empty(additional_pages)) {
pages %>%
.[[starting_page_list$page]] %>%
.[starting_page_list$start:starting_page_list$end] %>%
tibble(text_raw = .)
} else {
bind_rows(
pages %>%
.[[starting_page_list$page]] %>%
.[starting_page_list$start:starting_page_list$end] %>%
tibble(text_raw = .),
additional_page_list %>%
map_df(.f =
~pages %>%
.[[.x$page]] %>%
.[.x$start:.x$end] %>%
tibble(text_raw = .)
)
)
}
# Output
transactions
}
read_transactions(file = file)
read_transactions <- function(file){
pages <-
file %>%
pdftools::pdf_text() %>%
str_split(pattern = "\n")
initial_page <-
pages %>%
map_lgl(.f = ~ str_detect(.x, "^Transaction history$") %>% any()) %>%
which() %>%
.[[1]]
additional_pages <-
pages %>%
map_lgl(.f = ~ str_detect(.x, "^Transaction history \\(continued\\)$") %>% any()) %>%
which()
ending_balance_lines <-
pages[initial_page] %>%
.[[1]] %>%
str_which("^( )+(Ending balance on )([0-9]{1,2})/([0-9]{1,2})")
starting_page_list <-
initial_page %>%
list(
page = .,
start = pages[[.]] %>% str_which("( )+(Date)( )+(Number Description)") + 1,
end = if(length(ending_balance_lines) == 2){
ending_balance_lines[[2]] - 1
} else {
length(pages[[initial_page]]) - 1
}
)
additional_page_list <-
additional_pages %>%
map(.f = ~list(
page = .x,
start = pages[[.x]] %>% str_which("^Transaction history \\(continued\\)$") + 3,
end = pages[[.x]] %>% str_which("^( )+Ending balance on [0-9]{1,2}/[0-9]{1,2}") %>% .[[1]] - 1
))
# Scrape Report Date ====
report_date <-
pages[initial_page] %>%
.[[1]] %>%
.[1] %>%
str_extract("^([A-z]+ [0-9]{1,2}, [0-9]{4})") %>%
mdy()
# Prep table to be formatted ====
transactions <-
if(is_empty(additional_pages)) {
pages %>%
.[[starting_page_list$page]] %>%
.[starting_page_list$start:starting_page_list$end] %>%
tibble(text_raw = .)
} else {
bind_rows(
pages %>%
.[[starting_page_list$page]] %>%
.[starting_page_list$start:starting_page_list$end] %>%
tibble(text_raw = .),
additional_page_list %>%
map_df(.f =
~pages %>%
.[[.x$page]] %>%
.[.x$start:.x$end] %>%
tibble(text_raw = .)
)
)
}
# Output
transactions
}
"/Users/ericsurjaatmadja/Desktop/Personal_Finance/Data/Wells Fargo/Account Statements/Checking/" %>%
list.files(full.names = TRUE) %>%
map_df(.f = ~read_transactions(.x)) %>%
filter(text_raw %>% str_detect("^( )+[0-9]{1,2}/[0-9]{1,2}")) %>%
mutate(text_raw = text_raw %>% str_replace("^( )+[0-9]{1,2}/[0-9]{1,2}( )+", ""),
text = text_raw %>% str_replace("( ){4,999}.+$", ""),
numbers = text_raw %>% str_replace("^.{65}", ""),
ending_balance = numbers %>% str_extract("([0-9\\.,]+)( )+([0-9\\.,]+)$"),
numbers_noBalance = case_when(
is.na(ending_balance) ~ numbers,
TRUE ~ numbers %>% str_replace("( )+([0-9\\.,]+)$", "")
),
transaction_type =
case_when(
nchar(numbers_noBalance) < 32 ~ "Credit",
TRUE ~ "Debit"
),
amount = numbers_noBalance %>% str_replace_all(",", "") %>% as.numeric(),
daily_balance = ending_balance %>% str_extract("([0-9\\.,]+)$") %>% str_replace_all(",", "") %>% as.numeric()) %>%
select(amount,
transaction_type,
daily_balance)
read_transactions(file)
library(devtools)
packageVersion("devtools")
R.Version()
2+2
?read_csv
library(testthat)
library(usethis)
usethis::use_testthat()
usethis::use_test()
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_that("square_val actually squares", {
expect_equal(square_val(3), 9)
})
devtools::document()
test_that("square_val actually squares", {
expect_equal(square_val(3), 9)
})
test_that("square_val actually squares", {
expect_equal(square_val(3), 19)
})
16^2
usethis::use_package("tidyverse")
usethis::use_package("dplyr")
usethis::use_version()
?usethis::use_version()
?usethis::use_package()
packageVersion("dplyr")
usethis::use_package("dplyr", min_version = "1.0.7")
devtools::check()
RStudio.Version()
usethis::use_r("read_wf")
packageVersion("pdftools")
usethis::use_package("pdftools", min_version = "3.0.1")
packageVersion("stringr")
usethis::use_package("stringr", min_version = "1.4.0")
map_lgl
packageVersion("purrr")
usethis::use_package("purrr", min_version = "0.3.4")
packageVersion("lubridate")
usethis::use_package("lubridate", min_version = "1.7.10")
devtools::load_all()
devtool::document()
devtools::document()
devtools::load_all()
read_wf(file = "~/Desktop/Projects/Personal_Finance/Data/Wells Fargo/Account Statements/Checking/Statement of Accounts_Wells Fargo_Checking_2020-01.pdf")
usethis::use_test()
test_that("The file reads correctly", {
temp <- read_wf("~/Desktop/Projects/Personal_Finance/Data/Wells Fargo/Account Statements/Checking/Statement of Accounts_Wells Fargo_Checking_2020-01.pdf")
expect_equal(colnames(temp),
c("date", "description", "transaction_type", "amount", "ending_balance"))
expect_equal("tbl_df" %in% class(temp))
})
test_that("The file reads correctly", {
temp <- read_wf("~/Desktop/Projects/Personal_Finance/Data/Wells Fargo/Account Statements/Checking/Statement of Accounts_Wells Fargo_Checking_2020-01.pdf")
expect_equal(colnames(temp),
c("date", "description", "transaction_type", "amount", "ending_balance"))
})
read_wf("~/Desktop/Projects/Personal_Finance/Data/Wells Fargo/Account Statements/Checking/Statement of Accounts_Wells Fargo_Checking_2020-01.pdf")
test_that("The file reads correctly", {
expect_equal(colnames(read_wf("~/Desktop/Projects/Personal_Finance/Data/Wells Fargo/Account Statements/Checking/Statement of Accounts_Wells Fargo_Checking_2020-01.pdf")),
c("date", "description", "transaction_type", "amount", "ending_balance"))
})
1+1
